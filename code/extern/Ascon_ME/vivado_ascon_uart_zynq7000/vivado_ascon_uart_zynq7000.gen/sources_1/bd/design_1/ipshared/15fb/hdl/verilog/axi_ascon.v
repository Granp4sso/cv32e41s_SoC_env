// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axi_ascon_axi_ascon,hls_ip_2023_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.861120,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=7265,HLS_SYN_LUT=14006,HLS_VERSION=2023_1}" *)

module axi_ascon (
        ap_clk,
        ap_rst_n,
        s_axi_BUS_A_AWVALID,
        s_axi_BUS_A_AWREADY,
        s_axi_BUS_A_AWADDR,
        s_axi_BUS_A_WVALID,
        s_axi_BUS_A_WREADY,
        s_axi_BUS_A_WDATA,
        s_axi_BUS_A_WSTRB,
        s_axi_BUS_A_ARVALID,
        s_axi_BUS_A_ARREADY,
        s_axi_BUS_A_ARADDR,
        s_axi_BUS_A_RVALID,
        s_axi_BUS_A_RREADY,
        s_axi_BUS_A_RDATA,
        s_axi_BUS_A_RRESP,
        s_axi_BUS_A_BVALID,
        s_axi_BUS_A_BREADY,
        s_axi_BUS_A_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 46'd1;
parameter    ap_ST_fsm_state2 = 46'd2;
parameter    ap_ST_fsm_state3 = 46'd4;
parameter    ap_ST_fsm_state4 = 46'd8;
parameter    ap_ST_fsm_state5 = 46'd16;
parameter    ap_ST_fsm_state6 = 46'd32;
parameter    ap_ST_fsm_state7 = 46'd64;
parameter    ap_ST_fsm_state8 = 46'd128;
parameter    ap_ST_fsm_state9 = 46'd256;
parameter    ap_ST_fsm_state10 = 46'd512;
parameter    ap_ST_fsm_state11 = 46'd1024;
parameter    ap_ST_fsm_state12 = 46'd2048;
parameter    ap_ST_fsm_state13 = 46'd4096;
parameter    ap_ST_fsm_state14 = 46'd8192;
parameter    ap_ST_fsm_state15 = 46'd16384;
parameter    ap_ST_fsm_state16 = 46'd32768;
parameter    ap_ST_fsm_state17 = 46'd65536;
parameter    ap_ST_fsm_state18 = 46'd131072;
parameter    ap_ST_fsm_state19 = 46'd262144;
parameter    ap_ST_fsm_state20 = 46'd524288;
parameter    ap_ST_fsm_state21 = 46'd1048576;
parameter    ap_ST_fsm_state22 = 46'd2097152;
parameter    ap_ST_fsm_state23 = 46'd4194304;
parameter    ap_ST_fsm_state24 = 46'd8388608;
parameter    ap_ST_fsm_state25 = 46'd16777216;
parameter    ap_ST_fsm_state26 = 46'd33554432;
parameter    ap_ST_fsm_state27 = 46'd67108864;
parameter    ap_ST_fsm_state28 = 46'd134217728;
parameter    ap_ST_fsm_state29 = 46'd268435456;
parameter    ap_ST_fsm_state30 = 46'd536870912;
parameter    ap_ST_fsm_state31 = 46'd1073741824;
parameter    ap_ST_fsm_state32 = 46'd2147483648;
parameter    ap_ST_fsm_state33 = 46'd4294967296;
parameter    ap_ST_fsm_state34 = 46'd8589934592;
parameter    ap_ST_fsm_state35 = 46'd17179869184;
parameter    ap_ST_fsm_state36 = 46'd34359738368;
parameter    ap_ST_fsm_state37 = 46'd68719476736;
parameter    ap_ST_fsm_state38 = 46'd137438953472;
parameter    ap_ST_fsm_state39 = 46'd274877906944;
parameter    ap_ST_fsm_state40 = 46'd549755813888;
parameter    ap_ST_fsm_state41 = 46'd1099511627776;
parameter    ap_ST_fsm_state42 = 46'd2199023255552;
parameter    ap_ST_fsm_state43 = 46'd4398046511104;
parameter    ap_ST_fsm_state44 = 46'd8796093022208;
parameter    ap_ST_fsm_state45 = 46'd17592186044416;
parameter    ap_ST_fsm_state46 = 46'd35184372088832;
parameter    C_S_AXI_BUS_A_DATA_WIDTH = 32;
parameter    C_S_AXI_BUS_A_ADDR_WIDTH = 9;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_BUS_A_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_BUS_A_AWVALID;
output   s_axi_BUS_A_AWREADY;
input  [C_S_AXI_BUS_A_ADDR_WIDTH - 1:0] s_axi_BUS_A_AWADDR;
input   s_axi_BUS_A_WVALID;
output   s_axi_BUS_A_WREADY;
input  [C_S_AXI_BUS_A_DATA_WIDTH - 1:0] s_axi_BUS_A_WDATA;
input  [C_S_AXI_BUS_A_WSTRB_WIDTH - 1:0] s_axi_BUS_A_WSTRB;
input   s_axi_BUS_A_ARVALID;
output   s_axi_BUS_A_ARREADY;
input  [C_S_AXI_BUS_A_ADDR_WIDTH - 1:0] s_axi_BUS_A_ARADDR;
output   s_axi_BUS_A_RVALID;
input   s_axi_BUS_A_RREADY;
output  [C_S_AXI_BUS_A_DATA_WIDTH - 1:0] s_axi_BUS_A_RDATA;
output  [1:0] s_axi_BUS_A_RRESP;
output   s_axi_BUS_A_BVALID;
input   s_axi_BUS_A_BREADY;
output  [1:0] s_axi_BUS_A_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [45:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] decrypt;
wire   [31:0] c_1_i;
reg   [31:0] c_1_o;
reg    c_1_o_ap_vld;
wire   [31:0] c_2_i;
reg   [31:0] c_2_o;
reg    c_2_o_ap_vld;
wire   [31:0] c_3_i;
reg   [31:0] c_3_o;
reg    c_3_o_ap_vld;
wire   [31:0] c_4_i;
reg   [31:0] c_4_o;
reg    c_4_o_ap_vld;
wire   [31:0] c_5_i;
reg   [31:0] c_5_o;
reg    c_5_o_ap_vld;
wire   [31:0] c_6_i;
reg   [31:0] c_6_o;
reg    c_6_o_ap_vld;
wire   [31:0] c_7_i;
reg   [31:0] c_7_o;
reg    c_7_o_ap_vld;
wire   [31:0] c_8_i;
reg   [31:0] c_8_o;
reg    c_8_o_ap_vld;
wire   [31:0] m_1_i;
reg   [31:0] m_1_o;
reg    m_1_o_ap_vld;
wire   [31:0] m_2_i;
reg   [31:0] m_2_o;
reg    m_2_o_ap_vld;
wire   [31:0] m_3_i;
reg   [31:0] m_3_o;
reg    m_3_o_ap_vld;
wire   [31:0] m_4_i;
reg   [31:0] m_4_o;
reg    m_4_o_ap_vld;
wire   [31:0] ad_1;
wire   [31:0] ad_2;
wire   [31:0] ad_3;
wire   [31:0] ad_4;
wire   [31:0] nsec_1_i;
reg   [31:0] nsec_1_o;
reg    nsec_1_o_ap_vld;
wire   [31:0] nsec_2_i;
reg   [31:0] nsec_2_o;
reg    nsec_2_o_ap_vld;
wire   [31:0] nsec_3_i;
reg   [31:0] nsec_3_o;
reg    nsec_3_o_ap_vld;
wire   [31:0] nsec_4_i;
reg   [31:0] nsec_4_o;
reg    nsec_4_o_ap_vld;
wire   [31:0] npub_1;
wire   [31:0] npub_2;
wire   [31:0] npub_3;
wire   [31:0] npub_4;
wire   [31:0] k_1;
wire   [31:0] k_2;
wire   [31:0] k_3;
wire   [31:0] k_4;
wire   [31:0] ap_return;
reg   [31:0] c_1_read_reg_1351;
reg   [31:0] c_2_read_reg_1356;
reg   [31:0] c_3_read_reg_1361;
reg   [31:0] c_4_read_reg_1366;
reg   [31:0] c_5_read_reg_1371;
reg   [31:0] c_6_read_reg_1376;
reg   [31:0] c_7_read_reg_1381;
reg   [31:0] c_8_read_reg_1386;
reg   [31:0] m_1_read_reg_1391;
reg   [31:0] m_2_read_reg_1396;
reg   [31:0] m_3_read_reg_1401;
reg   [31:0] m_4_read_reg_1406;
reg   [31:0] ad_1_read_reg_1411;
reg   [31:0] ad_2_read_reg_1416;
reg   [31:0] ad_3_read_reg_1421;
reg   [31:0] ad_4_read_reg_1426;
reg   [31:0] nsec_1_read_reg_1431;
reg   [31:0] nsec_2_read_reg_1436;
reg   [31:0] nsec_3_read_reg_1441;
reg   [31:0] nsec_4_read_reg_1446;
reg   [31:0] npub_1_read_reg_1451;
reg   [31:0] npub_2_read_reg_1456;
reg   [31:0] npub_3_read_reg_1461;
reg   [31:0] npub_4_read_reg_1466;
reg   [31:0] k_1_read_reg_1471;
reg   [31:0] k_2_read_reg_1476;
reg   [31:0] k_3_read_reg_1481;
reg   [31:0] k_4_read_reg_1486;
wire   [0:0] icmp_ln116_fu_1187_p2;
reg   [0:0] icmp_ln116_reg_1491;
wire    ap_CS_fsm_state16;
wire   [0:0] grp_crypto_aead_decrypt_fu_1169_ap_return;
reg   [0:0] result_reg_1575;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire   [7:0] m_q1;
reg   [7:0] m_load_reg_1590;
wire    ap_CS_fsm_state20;
wire   [7:0] m_q0;
reg   [7:0] m_load_1_reg_1595;
wire   [7:0] nsec_q1;
reg   [7:0] nsec_load_reg_1610;
wire   [7:0] nsec_q0;
reg   [7:0] nsec_load_1_reg_1615;
reg   [7:0] m_load_2_reg_1630;
wire    ap_CS_fsm_state21;
reg   [7:0] m_load_3_reg_1635;
reg   [7:0] nsec_load_2_reg_1645;
reg   [7:0] nsec_load_3_reg_1650;
reg   [7:0] m_load_4_reg_1660;
wire    ap_CS_fsm_state22;
reg   [7:0] m_load_5_reg_1665;
reg   [7:0] nsec_load_4_reg_1680;
reg   [7:0] nsec_load_5_reg_1685;
reg   [7:0] m_load_6_reg_1700;
wire    ap_CS_fsm_state23;
reg   [7:0] m_load_7_reg_1705;
reg   [7:0] nsec_load_6_reg_1715;
reg   [7:0] nsec_load_7_reg_1720;
reg   [7:0] m_load_8_reg_1730;
wire    ap_CS_fsm_state24;
reg   [7:0] m_load_9_reg_1735;
reg   [7:0] nsec_load_8_reg_1750;
reg   [7:0] nsec_load_9_reg_1755;
reg   [7:0] m_load_10_reg_1770;
wire    ap_CS_fsm_state25;
reg   [7:0] m_load_11_reg_1775;
reg   [7:0] nsec_load_10_reg_1785;
reg   [7:0] nsec_load_11_reg_1790;
reg   [7:0] m_load_12_reg_1800;
wire    ap_CS_fsm_state26;
reg   [7:0] m_load_13_reg_1805;
reg   [7:0] nsec_load_12_reg_1820;
reg   [7:0] nsec_load_13_reg_1825;
wire    ap_CS_fsm_state30;
wire   [7:0] c_q1;
reg   [7:0] c_load_reg_1845;
wire    ap_CS_fsm_state31;
wire   [7:0] c_q0;
reg   [7:0] c_load_1_reg_1850;
reg   [7:0] c_load_2_reg_1865;
wire    ap_CS_fsm_state32;
reg   [7:0] c_load_3_reg_1870;
reg   [7:0] c_load_4_reg_1880;
wire    ap_CS_fsm_state33;
reg   [7:0] c_load_5_reg_1885;
reg   [7:0] c_load_6_reg_1900;
wire    ap_CS_fsm_state34;
reg   [7:0] c_load_7_reg_1905;
reg   [7:0] c_load_8_reg_1915;
wire    ap_CS_fsm_state35;
reg   [7:0] c_load_9_reg_1920;
reg   [7:0] c_load_10_reg_1935;
wire    ap_CS_fsm_state36;
reg   [7:0] c_load_11_reg_1940;
reg   [7:0] c_load_12_reg_1950;
wire    ap_CS_fsm_state37;
reg   [7:0] c_load_13_reg_1955;
reg   [7:0] c_load_14_reg_1970;
wire    ap_CS_fsm_state38;
reg   [7:0] c_load_15_reg_1975;
reg   [7:0] c_load_16_reg_1985;
wire    ap_CS_fsm_state39;
reg   [7:0] c_load_17_reg_1990;
reg   [7:0] c_load_18_reg_2005;
wire    ap_CS_fsm_state40;
reg   [7:0] c_load_19_reg_2010;
reg   [7:0] c_load_20_reg_2020;
wire    ap_CS_fsm_state41;
reg   [7:0] c_load_21_reg_2025;
reg   [7:0] c_load_22_reg_2040;
wire    ap_CS_fsm_state42;
reg   [7:0] c_load_23_reg_2045;
reg   [7:0] c_load_24_reg_2055;
wire    ap_CS_fsm_state43;
reg   [7:0] c_load_25_reg_2060;
reg   [7:0] c_load_26_reg_2075;
wire    ap_CS_fsm_state44;
reg   [7:0] c_load_27_reg_2080;
reg   [7:0] c_load_28_reg_2090;
wire    ap_CS_fsm_state45;
reg   [7:0] c_load_29_reg_2095;
reg   [4:0] c_address0;
reg    c_ce0;
reg    c_we0;
reg   [7:0] c_d0;
reg   [4:0] c_address1;
reg    c_ce1;
reg    c_we1;
reg   [3:0] m_address0;
reg    m_ce0;
reg    m_we0;
reg   [7:0] m_d0;
reg   [3:0] m_address1;
reg    m_ce1;
reg    m_we1;
reg   [3:0] ad_address0;
reg    ad_ce0;
reg    ad_we0;
wire   [7:0] ad_q0;
reg    ad_ce1;
reg    ad_we1;
reg   [3:0] nsec_address0;
reg    nsec_ce0;
reg    nsec_we0;
reg   [3:0] nsec_address1;
reg    nsec_ce1;
reg    nsec_we1;
reg   [3:0] npub_address0;
reg    npub_ce0;
reg    npub_we0;
wire   [7:0] npub_q0;
reg    npub_ce1;
reg    npub_we1;
reg   [3:0] k_address0;
reg    k_ce0;
reg    k_we0;
wire   [7:0] k_q0;
reg    k_ce1;
reg    k_we1;
wire    grp_uint32ToByteArray_fu_1087_ap_start;
wire    grp_uint32ToByteArray_fu_1087_ap_done;
wire    grp_uint32ToByteArray_fu_1087_ap_idle;
wire    grp_uint32ToByteArray_fu_1087_ap_ready;
reg   [31:0] grp_uint32ToByteArray_fu_1087_value_val;
wire   [4:0] grp_uint32ToByteArray_fu_1087_array_r_address0;
wire    grp_uint32ToByteArray_fu_1087_array_r_ce0;
wire    grp_uint32ToByteArray_fu_1087_array_r_we0;
wire   [7:0] grp_uint32ToByteArray_fu_1087_array_r_d0;
wire   [4:0] grp_uint32ToByteArray_fu_1087_array_r_address1;
wire    grp_uint32ToByteArray_fu_1087_array_r_ce1;
wire    grp_uint32ToByteArray_fu_1087_array_r_we1;
wire   [7:0] grp_uint32ToByteArray_fu_1087_array_r_d1;
reg   [4:0] grp_uint32ToByteArray_fu_1087_idx;
wire    grp_uint32ToByteArray_clone_fu_1104_ap_start;
wire    grp_uint32ToByteArray_clone_fu_1104_ap_done;
wire    grp_uint32ToByteArray_clone_fu_1104_ap_idle;
wire    grp_uint32ToByteArray_clone_fu_1104_ap_ready;
reg   [31:0] grp_uint32ToByteArray_clone_fu_1104_value_val;
wire   [3:0] grp_uint32ToByteArray_clone_fu_1104_array_r_address0;
wire    grp_uint32ToByteArray_clone_fu_1104_array_r_ce0;
wire    grp_uint32ToByteArray_clone_fu_1104_array_r_we0;
wire   [7:0] grp_uint32ToByteArray_clone_fu_1104_array_r_d0;
wire   [3:0] grp_uint32ToByteArray_clone_fu_1104_array_r_address1;
wire    grp_uint32ToByteArray_clone_fu_1104_array_r_ce1;
wire    grp_uint32ToByteArray_clone_fu_1104_array_r_we1;
wire   [7:0] grp_uint32ToByteArray_clone_fu_1104_array_r_d1;
reg   [3:0] grp_uint32ToByteArray_clone_fu_1104_idx;
wire    grp_uint32ToByteArray_clone_fu_1114_ap_start;
wire    grp_uint32ToByteArray_clone_fu_1114_ap_done;
wire    grp_uint32ToByteArray_clone_fu_1114_ap_idle;
wire    grp_uint32ToByteArray_clone_fu_1114_ap_ready;
reg   [31:0] grp_uint32ToByteArray_clone_fu_1114_value_val;
wire   [3:0] grp_uint32ToByteArray_clone_fu_1114_array_r_address0;
wire    grp_uint32ToByteArray_clone_fu_1114_array_r_ce0;
wire    grp_uint32ToByteArray_clone_fu_1114_array_r_we0;
wire   [7:0] grp_uint32ToByteArray_clone_fu_1114_array_r_d0;
wire   [3:0] grp_uint32ToByteArray_clone_fu_1114_array_r_address1;
wire    grp_uint32ToByteArray_clone_fu_1114_array_r_ce1;
wire    grp_uint32ToByteArray_clone_fu_1114_array_r_we1;
wire   [7:0] grp_uint32ToByteArray_clone_fu_1114_array_r_d1;
reg   [3:0] grp_uint32ToByteArray_clone_fu_1114_idx;
wire    grp_uint32ToByteArray_clone_fu_1124_ap_start;
wire    grp_uint32ToByteArray_clone_fu_1124_ap_done;
wire    grp_uint32ToByteArray_clone_fu_1124_ap_idle;
wire    grp_uint32ToByteArray_clone_fu_1124_ap_ready;
reg   [31:0] grp_uint32ToByteArray_clone_fu_1124_value_val;
wire   [3:0] grp_uint32ToByteArray_clone_fu_1124_array_r_address0;
wire    grp_uint32ToByteArray_clone_fu_1124_array_r_ce0;
wire    grp_uint32ToByteArray_clone_fu_1124_array_r_we0;
wire   [7:0] grp_uint32ToByteArray_clone_fu_1124_array_r_d0;
wire   [3:0] grp_uint32ToByteArray_clone_fu_1124_array_r_address1;
wire    grp_uint32ToByteArray_clone_fu_1124_array_r_ce1;
wire    grp_uint32ToByteArray_clone_fu_1124_array_r_we1;
wire   [7:0] grp_uint32ToByteArray_clone_fu_1124_array_r_d1;
reg   [3:0] grp_uint32ToByteArray_clone_fu_1124_idx;
wire    grp_uint32ToByteArray_clone_fu_1134_ap_start;
wire    grp_uint32ToByteArray_clone_fu_1134_ap_done;
wire    grp_uint32ToByteArray_clone_fu_1134_ap_idle;
wire    grp_uint32ToByteArray_clone_fu_1134_ap_ready;
reg   [31:0] grp_uint32ToByteArray_clone_fu_1134_value_val;
wire   [3:0] grp_uint32ToByteArray_clone_fu_1134_array_r_address0;
wire    grp_uint32ToByteArray_clone_fu_1134_array_r_ce0;
wire    grp_uint32ToByteArray_clone_fu_1134_array_r_we0;
wire   [7:0] grp_uint32ToByteArray_clone_fu_1134_array_r_d0;
wire   [3:0] grp_uint32ToByteArray_clone_fu_1134_array_r_address1;
wire    grp_uint32ToByteArray_clone_fu_1134_array_r_ce1;
wire    grp_uint32ToByteArray_clone_fu_1134_array_r_we1;
wire   [7:0] grp_uint32ToByteArray_clone_fu_1134_array_r_d1;
reg   [3:0] grp_uint32ToByteArray_clone_fu_1134_idx;
wire    grp_uint32ToByteArray_clone_fu_1144_ap_start;
wire    grp_uint32ToByteArray_clone_fu_1144_ap_done;
wire    grp_uint32ToByteArray_clone_fu_1144_ap_idle;
wire    grp_uint32ToByteArray_clone_fu_1144_ap_ready;
reg   [31:0] grp_uint32ToByteArray_clone_fu_1144_value_val;
wire   [3:0] grp_uint32ToByteArray_clone_fu_1144_array_r_address0;
wire    grp_uint32ToByteArray_clone_fu_1144_array_r_ce0;
wire    grp_uint32ToByteArray_clone_fu_1144_array_r_we0;
wire   [7:0] grp_uint32ToByteArray_clone_fu_1144_array_r_d0;
wire   [3:0] grp_uint32ToByteArray_clone_fu_1144_array_r_address1;
wire    grp_uint32ToByteArray_clone_fu_1144_array_r_ce1;
wire    grp_uint32ToByteArray_clone_fu_1144_array_r_we1;
wire   [7:0] grp_uint32ToByteArray_clone_fu_1144_array_r_d1;
reg   [3:0] grp_uint32ToByteArray_clone_fu_1144_idx;
wire    grp_crypto_aead_decrypt_fu_1169_ap_start;
wire    grp_crypto_aead_decrypt_fu_1169_ap_done;
wire    grp_crypto_aead_decrypt_fu_1169_ap_idle;
wire    grp_crypto_aead_decrypt_fu_1169_ap_ready;
wire   [3:0] grp_crypto_aead_decrypt_fu_1169_m_address0;
wire    grp_crypto_aead_decrypt_fu_1169_m_ce0;
wire    grp_crypto_aead_decrypt_fu_1169_m_we0;
wire   [7:0] grp_crypto_aead_decrypt_fu_1169_m_d0;
wire   [4:0] grp_crypto_aead_decrypt_fu_1169_c_address0;
wire    grp_crypto_aead_decrypt_fu_1169_c_ce0;
wire   [3:0] grp_crypto_aead_decrypt_fu_1169_ad_address0;
wire    grp_crypto_aead_decrypt_fu_1169_ad_ce0;
wire   [3:0] grp_crypto_aead_decrypt_fu_1169_npub_address0;
wire    grp_crypto_aead_decrypt_fu_1169_npub_ce0;
wire   [3:0] grp_crypto_aead_decrypt_fu_1169_k_address0;
wire    grp_crypto_aead_decrypt_fu_1169_k_ce0;
wire  signed [63:0] grp_crypto_aead_decrypt_fu_1169_grp_ROUND_6_fu_2110_p_din1;
wire   [63:0] grp_crypto_aead_decrypt_fu_1169_grp_ROUND_6_fu_2110_p_din2;
wire   [63:0] grp_crypto_aead_decrypt_fu_1169_grp_ROUND_6_fu_2110_p_din3;
wire   [63:0] grp_crypto_aead_decrypt_fu_1169_grp_ROUND_6_fu_2110_p_din4;
wire   [63:0] grp_crypto_aead_decrypt_fu_1169_grp_ROUND_6_fu_2110_p_din5;
wire  signed [7:0] grp_crypto_aead_decrypt_fu_1169_grp_ROUND_6_fu_2110_p_din6;
wire    grp_crypto_aead_encrypt_fu_1178_ap_start;
wire    grp_crypto_aead_encrypt_fu_1178_ap_done;
wire    grp_crypto_aead_encrypt_fu_1178_ap_idle;
wire    grp_crypto_aead_encrypt_fu_1178_ap_ready;
wire   [4:0] grp_crypto_aead_encrypt_fu_1178_c_address0;
wire    grp_crypto_aead_encrypt_fu_1178_c_ce0;
wire    grp_crypto_aead_encrypt_fu_1178_c_we0;
wire   [7:0] grp_crypto_aead_encrypt_fu_1178_c_d0;
wire   [3:0] grp_crypto_aead_encrypt_fu_1178_m_address0;
wire    grp_crypto_aead_encrypt_fu_1178_m_ce0;
wire   [3:0] grp_crypto_aead_encrypt_fu_1178_ad_address0;
wire    grp_crypto_aead_encrypt_fu_1178_ad_ce0;
wire   [3:0] grp_crypto_aead_encrypt_fu_1178_npub_address0;
wire    grp_crypto_aead_encrypt_fu_1178_npub_ce0;
wire   [3:0] grp_crypto_aead_encrypt_fu_1178_k_address0;
wire    grp_crypto_aead_encrypt_fu_1178_k_ce0;
wire  signed [63:0] grp_crypto_aead_encrypt_fu_1178_grp_ROUND_6_fu_2110_p_din1;
wire   [63:0] grp_crypto_aead_encrypt_fu_1178_grp_ROUND_6_fu_2110_p_din2;
wire   [63:0] grp_crypto_aead_encrypt_fu_1178_grp_ROUND_6_fu_2110_p_din3;
wire   [63:0] grp_crypto_aead_encrypt_fu_1178_grp_ROUND_6_fu_2110_p_din4;
wire   [63:0] grp_crypto_aead_encrypt_fu_1178_grp_ROUND_6_fu_2110_p_din5;
wire  signed [7:0] grp_crypto_aead_encrypt_fu_1178_grp_ROUND_6_fu_2110_p_din6;
wire    grp_ROUND_6_fu_2110_ap_ready;
reg   [63:0] grp_ROUND_6_fu_2110_s_0_read;
reg   [63:0] grp_ROUND_6_fu_2110_s_1_read;
reg   [63:0] grp_ROUND_6_fu_2110_s_2_read;
reg   [63:0] grp_ROUND_6_fu_2110_s_3_read;
reg   [63:0] grp_ROUND_6_fu_2110_s_4_read;
reg   [7:0] grp_ROUND_6_fu_2110_C;
wire   [63:0] grp_ROUND_6_fu_2110_ap_return_0;
wire   [63:0] grp_ROUND_6_fu_2110_ap_return_1;
wire   [63:0] grp_ROUND_6_fu_2110_ap_return_2;
wire   [63:0] grp_ROUND_6_fu_2110_ap_return_3;
wire   [63:0] grp_ROUND_6_fu_2110_ap_return_4;
reg   [0:0] ap_phi_mux_retval_0_phi_fu_1080_p4;
reg   [0:0] retval_0_reg_1077;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state27;
reg    grp_uint32ToByteArray_fu_1087_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state14;
reg    grp_uint32ToByteArray_clone_fu_1104_ap_start_reg;
reg    grp_uint32ToByteArray_clone_fu_1114_ap_start_reg;
reg    grp_uint32ToByteArray_clone_fu_1124_ap_start_reg;
reg    grp_uint32ToByteArray_clone_fu_1134_ap_start_reg;
reg    grp_uint32ToByteArray_clone_fu_1144_ap_start_reg;
reg    grp_crypto_aead_decrypt_fu_1169_ap_start_reg;
wire    ap_CS_fsm_state17;
reg    grp_crypto_aead_encrypt_fu_1178_ap_start_reg;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire   [31:0] or_ln135_2_fu_1193_p5;
wire   [31:0] or_ln136_2_fu_1202_p5;
wire   [31:0] or_ln137_2_fu_1211_p5;
wire   [31:0] or_ln138_2_fu_1220_p5;
wire   [31:0] or_ln140_2_fu_1231_p5;
wire   [31:0] or_ln141_2_fu_1240_p5;
wire   [31:0] or_ln142_2_fu_1249_p5;
wire   [31:0] or_ln143_2_fu_1258_p5;
wire   [31:0] or_ln120_2_fu_1269_p5;
wire   [31:0] or_ln121_2_fu_1278_p5;
wire   [31:0] or_ln122_2_fu_1287_p5;
wire   [31:0] or_ln123_2_fu_1296_p5;
wire   [31:0] or_ln124_2_fu_1305_p5;
wire   [31:0] or_ln125_2_fu_1314_p5;
wire   [31:0] or_ln126_2_fu_1323_p5;
wire   [31:0] or_ln127_2_fu_1332_p5;
reg   [45:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_block_state2_on_subcall_done;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_block_state4_on_subcall_done;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_block_state6_on_subcall_done;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
reg    ap_block_state8_on_subcall_done;
reg    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
reg    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 46'd1;
#0 grp_uint32ToByteArray_fu_1087_ap_start_reg = 1'b0;
#0 grp_uint32ToByteArray_clone_fu_1104_ap_start_reg = 1'b0;
#0 grp_uint32ToByteArray_clone_fu_1114_ap_start_reg = 1'b0;
#0 grp_uint32ToByteArray_clone_fu_1124_ap_start_reg = 1'b0;
#0 grp_uint32ToByteArray_clone_fu_1134_ap_start_reg = 1'b0;
#0 grp_uint32ToByteArray_clone_fu_1144_ap_start_reg = 1'b0;
#0 grp_crypto_aead_decrypt_fu_1169_ap_start_reg = 1'b0;
#0 grp_crypto_aead_encrypt_fu_1178_ap_start_reg = 1'b0;
end

axi_ascon_c_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c_address0),
    .ce0(c_ce0),
    .we0(c_we0),
    .d0(c_d0),
    .q0(c_q0),
    .address1(c_address1),
    .ce1(c_ce1),
    .we1(c_we1),
    .d1(grp_uint32ToByteArray_fu_1087_array_r_d1),
    .q1(c_q1)
);

axi_ascon_m_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
m_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(m_address0),
    .ce0(m_ce0),
    .we0(m_we0),
    .d0(m_d0),
    .q0(m_q0),
    .address1(m_address1),
    .ce1(m_ce1),
    .we1(m_we1),
    .d1(grp_uint32ToByteArray_clone_fu_1104_array_r_d1),
    .q1(m_q1)
);

axi_ascon_ad_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
ad_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ad_address0),
    .ce0(ad_ce0),
    .we0(ad_we0),
    .d0(grp_uint32ToByteArray_clone_fu_1114_array_r_d0),
    .q0(ad_q0),
    .address1(grp_uint32ToByteArray_clone_fu_1114_array_r_address1),
    .ce1(ad_ce1),
    .we1(ad_we1),
    .d1(grp_uint32ToByteArray_clone_fu_1114_array_r_d1)
);

axi_ascon_m_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
nsec_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(nsec_address0),
    .ce0(nsec_ce0),
    .we0(nsec_we0),
    .d0(grp_uint32ToByteArray_clone_fu_1124_array_r_d0),
    .q0(nsec_q0),
    .address1(nsec_address1),
    .ce1(nsec_ce1),
    .we1(nsec_we1),
    .d1(grp_uint32ToByteArray_clone_fu_1124_array_r_d1),
    .q1(nsec_q1)
);

axi_ascon_ad_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
npub_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(npub_address0),
    .ce0(npub_ce0),
    .we0(npub_we0),
    .d0(grp_uint32ToByteArray_clone_fu_1134_array_r_d0),
    .q0(npub_q0),
    .address1(grp_uint32ToByteArray_clone_fu_1134_array_r_address1),
    .ce1(npub_ce1),
    .we1(npub_we1),
    .d1(grp_uint32ToByteArray_clone_fu_1134_array_r_d1)
);

axi_ascon_ad_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
k_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(k_address0),
    .ce0(k_ce0),
    .we0(k_we0),
    .d0(grp_uint32ToByteArray_clone_fu_1144_array_r_d0),
    .q0(k_q0),
    .address1(grp_uint32ToByteArray_clone_fu_1144_array_r_address1),
    .ce1(k_ce1),
    .we1(k_we1),
    .d1(grp_uint32ToByteArray_clone_fu_1144_array_r_d1)
);

axi_ascon_uint32ToByteArray grp_uint32ToByteArray_fu_1087(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_uint32ToByteArray_fu_1087_ap_start),
    .ap_done(grp_uint32ToByteArray_fu_1087_ap_done),
    .ap_idle(grp_uint32ToByteArray_fu_1087_ap_idle),
    .ap_ready(grp_uint32ToByteArray_fu_1087_ap_ready),
    .value_val(grp_uint32ToByteArray_fu_1087_value_val),
    .array_r_address0(grp_uint32ToByteArray_fu_1087_array_r_address0),
    .array_r_ce0(grp_uint32ToByteArray_fu_1087_array_r_ce0),
    .array_r_we0(grp_uint32ToByteArray_fu_1087_array_r_we0),
    .array_r_d0(grp_uint32ToByteArray_fu_1087_array_r_d0),
    .array_r_address1(grp_uint32ToByteArray_fu_1087_array_r_address1),
    .array_r_ce1(grp_uint32ToByteArray_fu_1087_array_r_ce1),
    .array_r_we1(grp_uint32ToByteArray_fu_1087_array_r_we1),
    .array_r_d1(grp_uint32ToByteArray_fu_1087_array_r_d1),
    .idx(grp_uint32ToByteArray_fu_1087_idx)
);

axi_ascon_uint32ToByteArray_clone grp_uint32ToByteArray_clone_fu_1104(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_uint32ToByteArray_clone_fu_1104_ap_start),
    .ap_done(grp_uint32ToByteArray_clone_fu_1104_ap_done),
    .ap_idle(grp_uint32ToByteArray_clone_fu_1104_ap_idle),
    .ap_ready(grp_uint32ToByteArray_clone_fu_1104_ap_ready),
    .value_val(grp_uint32ToByteArray_clone_fu_1104_value_val),
    .array_r_address0(grp_uint32ToByteArray_clone_fu_1104_array_r_address0),
    .array_r_ce0(grp_uint32ToByteArray_clone_fu_1104_array_r_ce0),
    .array_r_we0(grp_uint32ToByteArray_clone_fu_1104_array_r_we0),
    .array_r_d0(grp_uint32ToByteArray_clone_fu_1104_array_r_d0),
    .array_r_address1(grp_uint32ToByteArray_clone_fu_1104_array_r_address1),
    .array_r_ce1(grp_uint32ToByteArray_clone_fu_1104_array_r_ce1),
    .array_r_we1(grp_uint32ToByteArray_clone_fu_1104_array_r_we1),
    .array_r_d1(grp_uint32ToByteArray_clone_fu_1104_array_r_d1),
    .idx(grp_uint32ToByteArray_clone_fu_1104_idx)
);

axi_ascon_uint32ToByteArray_clone grp_uint32ToByteArray_clone_fu_1114(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_uint32ToByteArray_clone_fu_1114_ap_start),
    .ap_done(grp_uint32ToByteArray_clone_fu_1114_ap_done),
    .ap_idle(grp_uint32ToByteArray_clone_fu_1114_ap_idle),
    .ap_ready(grp_uint32ToByteArray_clone_fu_1114_ap_ready),
    .value_val(grp_uint32ToByteArray_clone_fu_1114_value_val),
    .array_r_address0(grp_uint32ToByteArray_clone_fu_1114_array_r_address0),
    .array_r_ce0(grp_uint32ToByteArray_clone_fu_1114_array_r_ce0),
    .array_r_we0(grp_uint32ToByteArray_clone_fu_1114_array_r_we0),
    .array_r_d0(grp_uint32ToByteArray_clone_fu_1114_array_r_d0),
    .array_r_address1(grp_uint32ToByteArray_clone_fu_1114_array_r_address1),
    .array_r_ce1(grp_uint32ToByteArray_clone_fu_1114_array_r_ce1),
    .array_r_we1(grp_uint32ToByteArray_clone_fu_1114_array_r_we1),
    .array_r_d1(grp_uint32ToByteArray_clone_fu_1114_array_r_d1),
    .idx(grp_uint32ToByteArray_clone_fu_1114_idx)
);

axi_ascon_uint32ToByteArray_clone grp_uint32ToByteArray_clone_fu_1124(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_uint32ToByteArray_clone_fu_1124_ap_start),
    .ap_done(grp_uint32ToByteArray_clone_fu_1124_ap_done),
    .ap_idle(grp_uint32ToByteArray_clone_fu_1124_ap_idle),
    .ap_ready(grp_uint32ToByteArray_clone_fu_1124_ap_ready),
    .value_val(grp_uint32ToByteArray_clone_fu_1124_value_val),
    .array_r_address0(grp_uint32ToByteArray_clone_fu_1124_array_r_address0),
    .array_r_ce0(grp_uint32ToByteArray_clone_fu_1124_array_r_ce0),
    .array_r_we0(grp_uint32ToByteArray_clone_fu_1124_array_r_we0),
    .array_r_d0(grp_uint32ToByteArray_clone_fu_1124_array_r_d0),
    .array_r_address1(grp_uint32ToByteArray_clone_fu_1124_array_r_address1),
    .array_r_ce1(grp_uint32ToByteArray_clone_fu_1124_array_r_ce1),
    .array_r_we1(grp_uint32ToByteArray_clone_fu_1124_array_r_we1),
    .array_r_d1(grp_uint32ToByteArray_clone_fu_1124_array_r_d1),
    .idx(grp_uint32ToByteArray_clone_fu_1124_idx)
);

axi_ascon_uint32ToByteArray_clone grp_uint32ToByteArray_clone_fu_1134(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_uint32ToByteArray_clone_fu_1134_ap_start),
    .ap_done(grp_uint32ToByteArray_clone_fu_1134_ap_done),
    .ap_idle(grp_uint32ToByteArray_clone_fu_1134_ap_idle),
    .ap_ready(grp_uint32ToByteArray_clone_fu_1134_ap_ready),
    .value_val(grp_uint32ToByteArray_clone_fu_1134_value_val),
    .array_r_address0(grp_uint32ToByteArray_clone_fu_1134_array_r_address0),
    .array_r_ce0(grp_uint32ToByteArray_clone_fu_1134_array_r_ce0),
    .array_r_we0(grp_uint32ToByteArray_clone_fu_1134_array_r_we0),
    .array_r_d0(grp_uint32ToByteArray_clone_fu_1134_array_r_d0),
    .array_r_address1(grp_uint32ToByteArray_clone_fu_1134_array_r_address1),
    .array_r_ce1(grp_uint32ToByteArray_clone_fu_1134_array_r_ce1),
    .array_r_we1(grp_uint32ToByteArray_clone_fu_1134_array_r_we1),
    .array_r_d1(grp_uint32ToByteArray_clone_fu_1134_array_r_d1),
    .idx(grp_uint32ToByteArray_clone_fu_1134_idx)
);

axi_ascon_uint32ToByteArray_clone grp_uint32ToByteArray_clone_fu_1144(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_uint32ToByteArray_clone_fu_1144_ap_start),
    .ap_done(grp_uint32ToByteArray_clone_fu_1144_ap_done),
    .ap_idle(grp_uint32ToByteArray_clone_fu_1144_ap_idle),
    .ap_ready(grp_uint32ToByteArray_clone_fu_1144_ap_ready),
    .value_val(grp_uint32ToByteArray_clone_fu_1144_value_val),
    .array_r_address0(grp_uint32ToByteArray_clone_fu_1144_array_r_address0),
    .array_r_ce0(grp_uint32ToByteArray_clone_fu_1144_array_r_ce0),
    .array_r_we0(grp_uint32ToByteArray_clone_fu_1144_array_r_we0),
    .array_r_d0(grp_uint32ToByteArray_clone_fu_1144_array_r_d0),
    .array_r_address1(grp_uint32ToByteArray_clone_fu_1144_array_r_address1),
    .array_r_ce1(grp_uint32ToByteArray_clone_fu_1144_array_r_ce1),
    .array_r_we1(grp_uint32ToByteArray_clone_fu_1144_array_r_we1),
    .array_r_d1(grp_uint32ToByteArray_clone_fu_1144_array_r_d1),
    .idx(grp_uint32ToByteArray_clone_fu_1144_idx)
);

axi_ascon_crypto_aead_decrypt grp_crypto_aead_decrypt_fu_1169(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_crypto_aead_decrypt_fu_1169_ap_start),
    .ap_done(grp_crypto_aead_decrypt_fu_1169_ap_done),
    .ap_idle(grp_crypto_aead_decrypt_fu_1169_ap_idle),
    .ap_ready(grp_crypto_aead_decrypt_fu_1169_ap_ready),
    .m_address0(grp_crypto_aead_decrypt_fu_1169_m_address0),
    .m_ce0(grp_crypto_aead_decrypt_fu_1169_m_ce0),
    .m_we0(grp_crypto_aead_decrypt_fu_1169_m_we0),
    .m_d0(grp_crypto_aead_decrypt_fu_1169_m_d0),
    .c_address0(grp_crypto_aead_decrypt_fu_1169_c_address0),
    .c_ce0(grp_crypto_aead_decrypt_fu_1169_c_ce0),
    .c_q0(c_q0),
    .ad_address0(grp_crypto_aead_decrypt_fu_1169_ad_address0),
    .ad_ce0(grp_crypto_aead_decrypt_fu_1169_ad_ce0),
    .ad_q0(ad_q0),
    .npub_address0(grp_crypto_aead_decrypt_fu_1169_npub_address0),
    .npub_ce0(grp_crypto_aead_decrypt_fu_1169_npub_ce0),
    .npub_q0(npub_q0),
    .k_address0(grp_crypto_aead_decrypt_fu_1169_k_address0),
    .k_ce0(grp_crypto_aead_decrypt_fu_1169_k_ce0),
    .k_q0(k_q0),
    .ap_return(grp_crypto_aead_decrypt_fu_1169_ap_return),
    .grp_ROUND_6_fu_2110_p_din1(grp_crypto_aead_decrypt_fu_1169_grp_ROUND_6_fu_2110_p_din1),
    .grp_ROUND_6_fu_2110_p_din2(grp_crypto_aead_decrypt_fu_1169_grp_ROUND_6_fu_2110_p_din2),
    .grp_ROUND_6_fu_2110_p_din3(grp_crypto_aead_decrypt_fu_1169_grp_ROUND_6_fu_2110_p_din3),
    .grp_ROUND_6_fu_2110_p_din4(grp_crypto_aead_decrypt_fu_1169_grp_ROUND_6_fu_2110_p_din4),
    .grp_ROUND_6_fu_2110_p_din5(grp_crypto_aead_decrypt_fu_1169_grp_ROUND_6_fu_2110_p_din5),
    .grp_ROUND_6_fu_2110_p_din6(grp_crypto_aead_decrypt_fu_1169_grp_ROUND_6_fu_2110_p_din6),
    .grp_ROUND_6_fu_2110_p_dout0_0(grp_ROUND_6_fu_2110_ap_return_0),
    .grp_ROUND_6_fu_2110_p_dout0_1(grp_ROUND_6_fu_2110_ap_return_1),
    .grp_ROUND_6_fu_2110_p_dout0_2(grp_ROUND_6_fu_2110_ap_return_2),
    .grp_ROUND_6_fu_2110_p_dout0_3(grp_ROUND_6_fu_2110_ap_return_3),
    .grp_ROUND_6_fu_2110_p_dout0_4(grp_ROUND_6_fu_2110_ap_return_4),
    .grp_ROUND_6_fu_2110_p_ready(grp_ROUND_6_fu_2110_ap_ready)
);

axi_ascon_crypto_aead_encrypt grp_crypto_aead_encrypt_fu_1178(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_crypto_aead_encrypt_fu_1178_ap_start),
    .ap_done(grp_crypto_aead_encrypt_fu_1178_ap_done),
    .ap_idle(grp_crypto_aead_encrypt_fu_1178_ap_idle),
    .ap_ready(grp_crypto_aead_encrypt_fu_1178_ap_ready),
    .c_address0(grp_crypto_aead_encrypt_fu_1178_c_address0),
    .c_ce0(grp_crypto_aead_encrypt_fu_1178_c_ce0),
    .c_we0(grp_crypto_aead_encrypt_fu_1178_c_we0),
    .c_d0(grp_crypto_aead_encrypt_fu_1178_c_d0),
    .m_address0(grp_crypto_aead_encrypt_fu_1178_m_address0),
    .m_ce0(grp_crypto_aead_encrypt_fu_1178_m_ce0),
    .m_q0(m_q0),
    .ad_address0(grp_crypto_aead_encrypt_fu_1178_ad_address0),
    .ad_ce0(grp_crypto_aead_encrypt_fu_1178_ad_ce0),
    .ad_q0(ad_q0),
    .npub_address0(grp_crypto_aead_encrypt_fu_1178_npub_address0),
    .npub_ce0(grp_crypto_aead_encrypt_fu_1178_npub_ce0),
    .npub_q0(npub_q0),
    .k_address0(grp_crypto_aead_encrypt_fu_1178_k_address0),
    .k_ce0(grp_crypto_aead_encrypt_fu_1178_k_ce0),
    .k_q0(k_q0),
    .grp_ROUND_6_fu_2110_p_din1(grp_crypto_aead_encrypt_fu_1178_grp_ROUND_6_fu_2110_p_din1),
    .grp_ROUND_6_fu_2110_p_din2(grp_crypto_aead_encrypt_fu_1178_grp_ROUND_6_fu_2110_p_din2),
    .grp_ROUND_6_fu_2110_p_din3(grp_crypto_aead_encrypt_fu_1178_grp_ROUND_6_fu_2110_p_din3),
    .grp_ROUND_6_fu_2110_p_din4(grp_crypto_aead_encrypt_fu_1178_grp_ROUND_6_fu_2110_p_din4),
    .grp_ROUND_6_fu_2110_p_din5(grp_crypto_aead_encrypt_fu_1178_grp_ROUND_6_fu_2110_p_din5),
    .grp_ROUND_6_fu_2110_p_din6(grp_crypto_aead_encrypt_fu_1178_grp_ROUND_6_fu_2110_p_din6),
    .grp_ROUND_6_fu_2110_p_dout0_0(grp_ROUND_6_fu_2110_ap_return_0),
    .grp_ROUND_6_fu_2110_p_dout0_1(grp_ROUND_6_fu_2110_ap_return_1),
    .grp_ROUND_6_fu_2110_p_dout0_2(grp_ROUND_6_fu_2110_ap_return_2),
    .grp_ROUND_6_fu_2110_p_dout0_3(grp_ROUND_6_fu_2110_ap_return_3),
    .grp_ROUND_6_fu_2110_p_dout0_4(grp_ROUND_6_fu_2110_ap_return_4),
    .grp_ROUND_6_fu_2110_p_ready(grp_ROUND_6_fu_2110_ap_ready)
);

axi_ascon_ROUND_6 grp_ROUND_6_fu_2110(
    .ap_ready(grp_ROUND_6_fu_2110_ap_ready),
    .s_0_read(grp_ROUND_6_fu_2110_s_0_read),
    .s_1_read(grp_ROUND_6_fu_2110_s_1_read),
    .s_2_read(grp_ROUND_6_fu_2110_s_2_read),
    .s_3_read(grp_ROUND_6_fu_2110_s_3_read),
    .s_4_read(grp_ROUND_6_fu_2110_s_4_read),
    .C(grp_ROUND_6_fu_2110_C),
    .ap_return_0(grp_ROUND_6_fu_2110_ap_return_0),
    .ap_return_1(grp_ROUND_6_fu_2110_ap_return_1),
    .ap_return_2(grp_ROUND_6_fu_2110_ap_return_2),
    .ap_return_3(grp_ROUND_6_fu_2110_ap_return_3),
    .ap_return_4(grp_ROUND_6_fu_2110_ap_return_4)
);

axi_ascon_BUS_A_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_BUS_A_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_BUS_A_DATA_WIDTH ))
BUS_A_s_axi_U(
    .AWVALID(s_axi_BUS_A_AWVALID),
    .AWREADY(s_axi_BUS_A_AWREADY),
    .AWADDR(s_axi_BUS_A_AWADDR),
    .WVALID(s_axi_BUS_A_WVALID),
    .WREADY(s_axi_BUS_A_WREADY),
    .WDATA(s_axi_BUS_A_WDATA),
    .WSTRB(s_axi_BUS_A_WSTRB),
    .ARVALID(s_axi_BUS_A_ARVALID),
    .ARREADY(s_axi_BUS_A_ARREADY),
    .ARADDR(s_axi_BUS_A_ARADDR),
    .RVALID(s_axi_BUS_A_RVALID),
    .RREADY(s_axi_BUS_A_RREADY),
    .RDATA(s_axi_BUS_A_RDATA),
    .RRESP(s_axi_BUS_A_RRESP),
    .BVALID(s_axi_BUS_A_BVALID),
    .BREADY(s_axi_BUS_A_BREADY),
    .BRESP(s_axi_BUS_A_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(ap_return),
    .decrypt(decrypt),
    .c_1_o(c_1_o),
    .c_1_o_ap_vld(c_1_o_ap_vld),
    .c_1_i(c_1_i),
    .c_2_o(c_2_o),
    .c_2_o_ap_vld(c_2_o_ap_vld),
    .c_2_i(c_2_i),
    .c_3_o(c_3_o),
    .c_3_o_ap_vld(c_3_o_ap_vld),
    .c_3_i(c_3_i),
    .c_4_o(c_4_o),
    .c_4_o_ap_vld(c_4_o_ap_vld),
    .c_4_i(c_4_i),
    .c_5_o(c_5_o),
    .c_5_o_ap_vld(c_5_o_ap_vld),
    .c_5_i(c_5_i),
    .c_6_o(c_6_o),
    .c_6_o_ap_vld(c_6_o_ap_vld),
    .c_6_i(c_6_i),
    .c_7_o(c_7_o),
    .c_7_o_ap_vld(c_7_o_ap_vld),
    .c_7_i(c_7_i),
    .c_8_o(c_8_o),
    .c_8_o_ap_vld(c_8_o_ap_vld),
    .c_8_i(c_8_i),
    .m_1_o(m_1_o),
    .m_1_o_ap_vld(m_1_o_ap_vld),
    .m_1_i(m_1_i),
    .m_2_o(m_2_o),
    .m_2_o_ap_vld(m_2_o_ap_vld),
    .m_2_i(m_2_i),
    .m_3_o(m_3_o),
    .m_3_o_ap_vld(m_3_o_ap_vld),
    .m_3_i(m_3_i),
    .m_4_o(m_4_o),
    .m_4_o_ap_vld(m_4_o_ap_vld),
    .m_4_i(m_4_i),
    .ad_1(ad_1),
    .ad_2(ad_2),
    .ad_3(ad_3),
    .ad_4(ad_4),
    .nsec_1_o(nsec_1_o),
    .nsec_1_o_ap_vld(nsec_1_o_ap_vld),
    .nsec_1_i(nsec_1_i),
    .nsec_2_o(nsec_2_o),
    .nsec_2_o_ap_vld(nsec_2_o_ap_vld),
    .nsec_2_i(nsec_2_i),
    .nsec_3_o(nsec_3_o),
    .nsec_3_o_ap_vld(nsec_3_o_ap_vld),
    .nsec_3_i(nsec_3_i),
    .nsec_4_o(nsec_4_o),
    .nsec_4_o_ap_vld(nsec_4_o_ap_vld),
    .nsec_4_i(nsec_4_i),
    .npub_1(npub_1),
    .npub_2(npub_2),
    .npub_3(npub_3),
    .npub_4(npub_4),
    .k_1(k_1),
    .k_2(k_2),
    .k_3(k_3),
    .k_4(k_4)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_crypto_aead_decrypt_fu_1169_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state17)) begin
            grp_crypto_aead_decrypt_fu_1169_ap_start_reg <= 1'b1;
        end else if ((grp_crypto_aead_decrypt_fu_1169_ap_ready == 1'b1)) begin
            grp_crypto_aead_decrypt_fu_1169_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_crypto_aead_encrypt_fu_1178_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state28)) begin
            grp_crypto_aead_encrypt_fu_1178_ap_start_reg <= 1'b1;
        end else if ((grp_crypto_aead_encrypt_fu_1178_ap_ready == 1'b1)) begin
            grp_crypto_aead_encrypt_fu_1178_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_uint32ToByteArray_clone_fu_1104_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_uint32ToByteArray_clone_fu_1104_ap_start_reg <= 1'b1;
        end else if ((grp_uint32ToByteArray_clone_fu_1104_ap_ready == 1'b1)) begin
            grp_uint32ToByteArray_clone_fu_1104_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_uint32ToByteArray_clone_fu_1114_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_uint32ToByteArray_clone_fu_1114_ap_start_reg <= 1'b1;
        end else if ((grp_uint32ToByteArray_clone_fu_1114_ap_ready == 1'b1)) begin
            grp_uint32ToByteArray_clone_fu_1114_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_uint32ToByteArray_clone_fu_1124_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_uint32ToByteArray_clone_fu_1124_ap_start_reg <= 1'b1;
        end else if ((grp_uint32ToByteArray_clone_fu_1124_ap_ready == 1'b1)) begin
            grp_uint32ToByteArray_clone_fu_1124_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_uint32ToByteArray_clone_fu_1134_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_uint32ToByteArray_clone_fu_1134_ap_start_reg <= 1'b1;
        end else if ((grp_uint32ToByteArray_clone_fu_1134_ap_ready == 1'b1)) begin
            grp_uint32ToByteArray_clone_fu_1134_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_uint32ToByteArray_clone_fu_1144_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_uint32ToByteArray_clone_fu_1144_ap_start_reg <= 1'b1;
        end else if ((grp_uint32ToByteArray_clone_fu_1144_ap_ready == 1'b1)) begin
            grp_uint32ToByteArray_clone_fu_1144_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_uint32ToByteArray_fu_1087_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_uint32ToByteArray_fu_1087_ap_start_reg <= 1'b1;
        end else if ((grp_uint32ToByteArray_fu_1087_ap_ready == 1'b1)) begin
            grp_uint32ToByteArray_fu_1087_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        retval_0_reg_1077 <= result_reg_1575;
    end else if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln116_reg_1491 == 1'd1))) begin
        retval_0_reg_1077 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ad_1_read_reg_1411 <= ad_1;
        ad_2_read_reg_1416 <= ad_2;
        ad_3_read_reg_1421 <= ad_3;
        ad_4_read_reg_1426 <= ad_4;
        c_1_read_reg_1351 <= c_1_i;
        c_2_read_reg_1356 <= c_2_i;
        c_3_read_reg_1361 <= c_3_i;
        c_4_read_reg_1366 <= c_4_i;
        c_5_read_reg_1371 <= c_5_i;
        c_6_read_reg_1376 <= c_6_i;
        c_7_read_reg_1381 <= c_7_i;
        c_8_read_reg_1386 <= c_8_i;
        icmp_ln116_reg_1491 <= icmp_ln116_fu_1187_p2;
        k_1_read_reg_1471 <= k_1;
        k_2_read_reg_1476 <= k_2;
        k_3_read_reg_1481 <= k_3;
        k_4_read_reg_1486 <= k_4;
        m_1_read_reg_1391 <= m_1_i;
        m_2_read_reg_1396 <= m_2_i;
        m_3_read_reg_1401 <= m_3_i;
        m_4_read_reg_1406 <= m_4_i;
        npub_1_read_reg_1451 <= npub_1;
        npub_2_read_reg_1456 <= npub_2;
        npub_3_read_reg_1461 <= npub_3;
        npub_4_read_reg_1466 <= npub_4;
        nsec_1_read_reg_1431 <= nsec_1_i;
        nsec_2_read_reg_1436 <= nsec_2_i;
        nsec_3_read_reg_1441 <= nsec_3_i;
        nsec_4_read_reg_1446 <= nsec_4_i;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        c_load_10_reg_1935 <= c_q1;
        c_load_11_reg_1940 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        c_load_12_reg_1950 <= c_q1;
        c_load_13_reg_1955 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        c_load_14_reg_1970 <= c_q1;
        c_load_15_reg_1975 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        c_load_16_reg_1985 <= c_q1;
        c_load_17_reg_1990 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        c_load_18_reg_2005 <= c_q1;
        c_load_19_reg_2010 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        c_load_1_reg_1850 <= c_q0;
        c_load_reg_1845 <= c_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        c_load_20_reg_2020 <= c_q1;
        c_load_21_reg_2025 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        c_load_22_reg_2040 <= c_q1;
        c_load_23_reg_2045 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        c_load_24_reg_2055 <= c_q1;
        c_load_25_reg_2060 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        c_load_26_reg_2075 <= c_q1;
        c_load_27_reg_2080 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        c_load_28_reg_2090 <= c_q1;
        c_load_29_reg_2095 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        c_load_2_reg_1865 <= c_q1;
        c_load_3_reg_1870 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        c_load_4_reg_1880 <= c_q1;
        c_load_5_reg_1885 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        c_load_6_reg_1900 <= c_q1;
        c_load_7_reg_1905 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        c_load_8_reg_1915 <= c_q1;
        c_load_9_reg_1920 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        m_load_10_reg_1770 <= m_q1;
        m_load_11_reg_1775 <= m_q0;
        nsec_load_10_reg_1785 <= nsec_q1;
        nsec_load_11_reg_1790 <= nsec_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        m_load_12_reg_1800 <= m_q1;
        m_load_13_reg_1805 <= m_q0;
        nsec_load_12_reg_1820 <= nsec_q1;
        nsec_load_13_reg_1825 <= nsec_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        m_load_1_reg_1595 <= m_q0;
        m_load_reg_1590 <= m_q1;
        nsec_load_1_reg_1615 <= nsec_q0;
        nsec_load_reg_1610 <= nsec_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        m_load_2_reg_1630 <= m_q1;
        m_load_3_reg_1635 <= m_q0;
        nsec_load_2_reg_1645 <= nsec_q1;
        nsec_load_3_reg_1650 <= nsec_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        m_load_4_reg_1660 <= m_q1;
        m_load_5_reg_1665 <= m_q0;
        nsec_load_4_reg_1680 <= nsec_q1;
        nsec_load_5_reg_1685 <= nsec_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        m_load_6_reg_1700 <= m_q1;
        m_load_7_reg_1705 <= m_q0;
        nsec_load_6_reg_1715 <= nsec_q1;
        nsec_load_7_reg_1720 <= nsec_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        m_load_8_reg_1730 <= m_q1;
        m_load_9_reg_1735 <= m_q0;
        nsec_load_8_reg_1750 <= nsec_q1;
        nsec_load_9_reg_1755 <= nsec_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        result_reg_1575 <= grp_crypto_aead_decrypt_fu_1169_ap_return;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ad_address0 = grp_crypto_aead_encrypt_fu_1178_ad_address0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        ad_address0 = grp_crypto_aead_decrypt_fu_1169_ad_address0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        ad_address0 = grp_uint32ToByteArray_clone_fu_1114_array_r_address0;
    end else begin
        ad_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ad_ce0 = grp_crypto_aead_encrypt_fu_1178_ad_ce0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        ad_ce0 = grp_crypto_aead_decrypt_fu_1169_ad_ce0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        ad_ce0 = grp_uint32ToByteArray_clone_fu_1114_array_r_ce0;
    end else begin
        ad_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        ad_ce1 = grp_uint32ToByteArray_clone_fu_1114_array_r_ce1;
    end else begin
        ad_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        ad_we0 = grp_uint32ToByteArray_clone_fu_1114_array_r_we0;
    end else begin
        ad_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        ad_we1 = grp_uint32ToByteArray_clone_fu_1114_array_r_we1;
    end else begin
        ad_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_uint32ToByteArray_fu_1087_ap_done == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((grp_uint32ToByteArray_fu_1087_ap_done == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((grp_uint32ToByteArray_fu_1087_ap_done == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((grp_uint32ToByteArray_fu_1087_ap_done == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

assign ap_ST_fsm_state17_blk = 1'b0;

always @ (*) begin
    if ((grp_crypto_aead_decrypt_fu_1169_ap_done == 1'b0)) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

always @ (*) begin
    if ((grp_crypto_aead_encrypt_fu_1178_ap_done == 1'b0)) begin
        ap_ST_fsm_state29_blk = 1'b1;
    end else begin
        ap_ST_fsm_state29_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_on_subcall_done)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_on_subcall_done)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state6_on_subcall_done)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state8_on_subcall_done)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln116_reg_1491 == 1'd1))) begin
        ap_phi_mux_retval_0_phi_fu_1080_p4 = 1'd0;
    end else begin
        ap_phi_mux_retval_0_phi_fu_1080_p4 = retval_0_reg_1077;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln116_reg_1491 == 1'd1))) begin
        c_1_o = or_ln120_2_fu_1269_p5;
    end else begin
        c_1_o = c_1_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln116_reg_1491 == 1'd1))) begin
        c_1_o_ap_vld = 1'b1;
    end else begin
        c_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln116_reg_1491 == 1'd1))) begin
        c_2_o = or_ln121_2_fu_1278_p5;
    end else begin
        c_2_o = c_2_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln116_reg_1491 == 1'd1))) begin
        c_2_o_ap_vld = 1'b1;
    end else begin
        c_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln116_reg_1491 == 1'd1))) begin
        c_3_o = or_ln122_2_fu_1287_p5;
    end else begin
        c_3_o = c_3_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln116_reg_1491 == 1'd1))) begin
        c_3_o_ap_vld = 1'b1;
    end else begin
        c_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln116_reg_1491 == 1'd1))) begin
        c_4_o = or_ln123_2_fu_1296_p5;
    end else begin
        c_4_o = c_4_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln116_reg_1491 == 1'd1))) begin
        c_4_o_ap_vld = 1'b1;
    end else begin
        c_4_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln116_reg_1491 == 1'd1))) begin
        c_5_o = or_ln124_2_fu_1305_p5;
    end else begin
        c_5_o = c_5_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln116_reg_1491 == 1'd1))) begin
        c_5_o_ap_vld = 1'b1;
    end else begin
        c_5_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln116_reg_1491 == 1'd1))) begin
        c_6_o = or_ln125_2_fu_1314_p5;
    end else begin
        c_6_o = c_6_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln116_reg_1491 == 1'd1))) begin
        c_6_o_ap_vld = 1'b1;
    end else begin
        c_6_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln116_reg_1491 == 1'd1))) begin
        c_7_o = or_ln126_2_fu_1323_p5;
    end else begin
        c_7_o = c_7_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln116_reg_1491 == 1'd1))) begin
        c_7_o_ap_vld = 1'b1;
    end else begin
        c_7_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln116_reg_1491 == 1'd1))) begin
        c_8_o = or_ln127_2_fu_1332_p5;
    end else begin
        c_8_o = c_8_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln116_reg_1491 == 1'd1))) begin
        c_8_o_ap_vld = 1'b1;
    end else begin
        c_8_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        c_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        c_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        c_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        c_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        c_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        c_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        c_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        c_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        c_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        c_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        c_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        c_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        c_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        c_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        c_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        c_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c_address0 = grp_crypto_aead_encrypt_fu_1178_c_address0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        c_address0 = grp_crypto_aead_decrypt_fu_1169_c_address0;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16))) begin
        c_address0 = grp_uint32ToByteArray_fu_1087_array_r_address0;
    end else begin
        c_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        c_address1 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        c_address1 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        c_address1 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        c_address1 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        c_address1 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        c_address1 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        c_address1 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        c_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        c_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        c_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        c_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        c_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        c_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        c_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        c_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        c_address1 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16))) begin
        c_address1 = grp_uint32ToByteArray_fu_1087_array_r_address1;
    end else begin
        c_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30))) begin
        c_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        c_ce0 = grp_crypto_aead_encrypt_fu_1178_c_ce0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        c_ce0 = grp_crypto_aead_decrypt_fu_1169_c_ce0;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16))) begin
        c_ce0 = grp_uint32ToByteArray_fu_1087_array_r_ce0;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30))) begin
        c_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16))) begin
        c_ce1 = grp_uint32ToByteArray_fu_1087_array_r_ce1;
    end else begin
        c_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        c_d0 = grp_crypto_aead_encrypt_fu_1178_c_d0;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16))) begin
        c_d0 = grp_uint32ToByteArray_fu_1087_array_r_d0;
    end else begin
        c_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        c_we0 = grp_crypto_aead_encrypt_fu_1178_c_we0;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16))) begin
        c_we0 = grp_uint32ToByteArray_fu_1087_array_r_we0;
    end else begin
        c_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16))) begin
        c_we1 = grp_uint32ToByteArray_fu_1087_array_r_we1;
    end else begin
        c_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_ROUND_6_fu_2110_C = grp_crypto_aead_encrypt_fu_1178_grp_ROUND_6_fu_2110_p_din6;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_ROUND_6_fu_2110_C = grp_crypto_aead_decrypt_fu_1169_grp_ROUND_6_fu_2110_p_din6;
    end else begin
        grp_ROUND_6_fu_2110_C = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_ROUND_6_fu_2110_s_0_read = grp_crypto_aead_encrypt_fu_1178_grp_ROUND_6_fu_2110_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_ROUND_6_fu_2110_s_0_read = grp_crypto_aead_decrypt_fu_1169_grp_ROUND_6_fu_2110_p_din1;
    end else begin
        grp_ROUND_6_fu_2110_s_0_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_ROUND_6_fu_2110_s_1_read = grp_crypto_aead_encrypt_fu_1178_grp_ROUND_6_fu_2110_p_din2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_ROUND_6_fu_2110_s_1_read = grp_crypto_aead_decrypt_fu_1169_grp_ROUND_6_fu_2110_p_din2;
    end else begin
        grp_ROUND_6_fu_2110_s_1_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_ROUND_6_fu_2110_s_2_read = grp_crypto_aead_encrypt_fu_1178_grp_ROUND_6_fu_2110_p_din3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_ROUND_6_fu_2110_s_2_read = grp_crypto_aead_decrypt_fu_1169_grp_ROUND_6_fu_2110_p_din3;
    end else begin
        grp_ROUND_6_fu_2110_s_2_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_ROUND_6_fu_2110_s_3_read = grp_crypto_aead_encrypt_fu_1178_grp_ROUND_6_fu_2110_p_din4;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_ROUND_6_fu_2110_s_3_read = grp_crypto_aead_decrypt_fu_1169_grp_ROUND_6_fu_2110_p_din4;
    end else begin
        grp_ROUND_6_fu_2110_s_3_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_ROUND_6_fu_2110_s_4_read = grp_crypto_aead_encrypt_fu_1178_grp_ROUND_6_fu_2110_p_din5;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_ROUND_6_fu_2110_s_4_read = grp_crypto_aead_decrypt_fu_1169_grp_ROUND_6_fu_2110_p_din5;
    end else begin
        grp_ROUND_6_fu_2110_s_4_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_uint32ToByteArray_clone_fu_1104_idx = 4'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_uint32ToByteArray_clone_fu_1104_idx = 4'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_uint32ToByteArray_clone_fu_1104_idx = 4'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_uint32ToByteArray_clone_fu_1104_idx = 4'd0;
    end else begin
        grp_uint32ToByteArray_clone_fu_1104_idx = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_uint32ToByteArray_clone_fu_1104_value_val = m_4_read_reg_1406;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_uint32ToByteArray_clone_fu_1104_value_val = m_3_read_reg_1401;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_uint32ToByteArray_clone_fu_1104_value_val = m_2_read_reg_1396;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_uint32ToByteArray_clone_fu_1104_value_val = m_1_read_reg_1391;
    end else begin
        grp_uint32ToByteArray_clone_fu_1104_value_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_uint32ToByteArray_clone_fu_1114_idx = 4'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_uint32ToByteArray_clone_fu_1114_idx = 4'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_uint32ToByteArray_clone_fu_1114_idx = 4'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_uint32ToByteArray_clone_fu_1114_idx = 4'd0;
    end else begin
        grp_uint32ToByteArray_clone_fu_1114_idx = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_uint32ToByteArray_clone_fu_1114_value_val = ad_4_read_reg_1426;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_uint32ToByteArray_clone_fu_1114_value_val = ad_3_read_reg_1421;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_uint32ToByteArray_clone_fu_1114_value_val = ad_2_read_reg_1416;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_uint32ToByteArray_clone_fu_1114_value_val = ad_1_read_reg_1411;
    end else begin
        grp_uint32ToByteArray_clone_fu_1114_value_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_uint32ToByteArray_clone_fu_1124_idx = 4'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_uint32ToByteArray_clone_fu_1124_idx = 4'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_uint32ToByteArray_clone_fu_1124_idx = 4'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_uint32ToByteArray_clone_fu_1124_idx = 4'd0;
    end else begin
        grp_uint32ToByteArray_clone_fu_1124_idx = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_uint32ToByteArray_clone_fu_1124_value_val = nsec_4_read_reg_1446;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_uint32ToByteArray_clone_fu_1124_value_val = nsec_3_read_reg_1441;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_uint32ToByteArray_clone_fu_1124_value_val = nsec_2_read_reg_1436;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_uint32ToByteArray_clone_fu_1124_value_val = nsec_1_read_reg_1431;
    end else begin
        grp_uint32ToByteArray_clone_fu_1124_value_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_uint32ToByteArray_clone_fu_1134_idx = 4'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_uint32ToByteArray_clone_fu_1134_idx = 4'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_uint32ToByteArray_clone_fu_1134_idx = 4'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_uint32ToByteArray_clone_fu_1134_idx = 4'd0;
    end else begin
        grp_uint32ToByteArray_clone_fu_1134_idx = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_uint32ToByteArray_clone_fu_1134_value_val = npub_4_read_reg_1466;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_uint32ToByteArray_clone_fu_1134_value_val = npub_3_read_reg_1461;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_uint32ToByteArray_clone_fu_1134_value_val = npub_2_read_reg_1456;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_uint32ToByteArray_clone_fu_1134_value_val = npub_1_read_reg_1451;
    end else begin
        grp_uint32ToByteArray_clone_fu_1134_value_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_uint32ToByteArray_clone_fu_1144_idx = 4'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_uint32ToByteArray_clone_fu_1144_idx = 4'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_uint32ToByteArray_clone_fu_1144_idx = 4'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_uint32ToByteArray_clone_fu_1144_idx = 4'd0;
    end else begin
        grp_uint32ToByteArray_clone_fu_1144_idx = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_uint32ToByteArray_clone_fu_1144_value_val = k_4_read_reg_1486;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_uint32ToByteArray_clone_fu_1144_value_val = k_3_read_reg_1481;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_uint32ToByteArray_clone_fu_1144_value_val = k_2_read_reg_1476;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_uint32ToByteArray_clone_fu_1144_value_val = k_1_read_reg_1471;
    end else begin
        grp_uint32ToByteArray_clone_fu_1144_value_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_uint32ToByteArray_fu_1087_idx = 5'd28;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_uint32ToByteArray_fu_1087_idx = 5'd24;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_uint32ToByteArray_fu_1087_idx = 5'd20;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_uint32ToByteArray_fu_1087_idx = 5'd16;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_uint32ToByteArray_fu_1087_idx = 5'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_uint32ToByteArray_fu_1087_idx = 5'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_uint32ToByteArray_fu_1087_idx = 5'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_uint32ToByteArray_fu_1087_idx = 5'd0;
    end else begin
        grp_uint32ToByteArray_fu_1087_idx = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_uint32ToByteArray_fu_1087_value_val = c_8_read_reg_1386;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_uint32ToByteArray_fu_1087_value_val = c_7_read_reg_1381;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_uint32ToByteArray_fu_1087_value_val = c_6_read_reg_1376;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_uint32ToByteArray_fu_1087_value_val = c_5_read_reg_1371;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_uint32ToByteArray_fu_1087_value_val = c_4_read_reg_1366;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_uint32ToByteArray_fu_1087_value_val = c_3_read_reg_1361;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_uint32ToByteArray_fu_1087_value_val = c_2_read_reg_1356;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_uint32ToByteArray_fu_1087_value_val = c_1_read_reg_1351;
    end else begin
        grp_uint32ToByteArray_fu_1087_value_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        k_address0 = grp_crypto_aead_encrypt_fu_1178_k_address0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        k_address0 = grp_crypto_aead_decrypt_fu_1169_k_address0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        k_address0 = grp_uint32ToByteArray_clone_fu_1144_array_r_address0;
    end else begin
        k_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        k_ce0 = grp_crypto_aead_encrypt_fu_1178_k_ce0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        k_ce0 = grp_crypto_aead_decrypt_fu_1169_k_ce0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        k_ce0 = grp_uint32ToByteArray_clone_fu_1144_array_r_ce0;
    end else begin
        k_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        k_ce1 = grp_uint32ToByteArray_clone_fu_1144_array_r_ce1;
    end else begin
        k_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        k_we0 = grp_uint32ToByteArray_clone_fu_1144_array_r_we0;
    end else begin
        k_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        k_we1 = grp_uint32ToByteArray_clone_fu_1144_array_r_we1;
    end else begin
        k_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        m_1_o = or_ln135_2_fu_1193_p5;
    end else begin
        m_1_o = m_1_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        m_1_o_ap_vld = 1'b1;
    end else begin
        m_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        m_2_o = or_ln136_2_fu_1202_p5;
    end else begin
        m_2_o = m_2_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        m_2_o_ap_vld = 1'b1;
    end else begin
        m_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        m_3_o = or_ln137_2_fu_1211_p5;
    end else begin
        m_3_o = m_3_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        m_3_o_ap_vld = 1'b1;
    end else begin
        m_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        m_4_o = or_ln138_2_fu_1220_p5;
    end else begin
        m_4_o = m_4_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        m_4_o_ap_vld = 1'b1;
    end else begin
        m_4_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        m_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        m_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        m_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        m_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        m_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        m_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        m_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        m_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        m_address0 = grp_crypto_aead_encrypt_fu_1178_m_address0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        m_address0 = grp_crypto_aead_decrypt_fu_1169_m_address0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        m_address0 = grp_uint32ToByteArray_clone_fu_1104_array_r_address0;
    end else begin
        m_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        m_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        m_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        m_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        m_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        m_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        m_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        m_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        m_address1 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        m_address1 = grp_uint32ToByteArray_clone_fu_1104_array_r_address1;
    end else begin
        m_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19))) begin
        m_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        m_ce0 = grp_crypto_aead_encrypt_fu_1178_m_ce0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        m_ce0 = grp_crypto_aead_decrypt_fu_1169_m_ce0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        m_ce0 = grp_uint32ToByteArray_clone_fu_1104_array_r_ce0;
    end else begin
        m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19))) begin
        m_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        m_ce1 = grp_uint32ToByteArray_clone_fu_1104_array_r_ce1;
    end else begin
        m_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        m_d0 = grp_crypto_aead_decrypt_fu_1169_m_d0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        m_d0 = grp_uint32ToByteArray_clone_fu_1104_array_r_d0;
    end else begin
        m_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        m_we0 = grp_crypto_aead_decrypt_fu_1169_m_we0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        m_we0 = grp_uint32ToByteArray_clone_fu_1104_array_r_we0;
    end else begin
        m_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        m_we1 = grp_uint32ToByteArray_clone_fu_1104_array_r_we1;
    end else begin
        m_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        npub_address0 = grp_crypto_aead_encrypt_fu_1178_npub_address0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        npub_address0 = grp_crypto_aead_decrypt_fu_1169_npub_address0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        npub_address0 = grp_uint32ToByteArray_clone_fu_1134_array_r_address0;
    end else begin
        npub_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        npub_ce0 = grp_crypto_aead_encrypt_fu_1178_npub_ce0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        npub_ce0 = grp_crypto_aead_decrypt_fu_1169_npub_ce0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        npub_ce0 = grp_uint32ToByteArray_clone_fu_1134_array_r_ce0;
    end else begin
        npub_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        npub_ce1 = grp_uint32ToByteArray_clone_fu_1134_array_r_ce1;
    end else begin
        npub_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        npub_we0 = grp_uint32ToByteArray_clone_fu_1134_array_r_we0;
    end else begin
        npub_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        npub_we1 = grp_uint32ToByteArray_clone_fu_1134_array_r_we1;
    end else begin
        npub_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        nsec_1_o = or_ln140_2_fu_1231_p5;
    end else begin
        nsec_1_o = nsec_1_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        nsec_1_o_ap_vld = 1'b1;
    end else begin
        nsec_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        nsec_2_o = or_ln141_2_fu_1240_p5;
    end else begin
        nsec_2_o = nsec_2_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        nsec_2_o_ap_vld = 1'b1;
    end else begin
        nsec_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        nsec_3_o = or_ln142_2_fu_1249_p5;
    end else begin
        nsec_3_o = nsec_3_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        nsec_3_o_ap_vld = 1'b1;
    end else begin
        nsec_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        nsec_4_o = or_ln143_2_fu_1258_p5;
    end else begin
        nsec_4_o = nsec_4_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        nsec_4_o_ap_vld = 1'b1;
    end else begin
        nsec_4_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        nsec_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        nsec_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        nsec_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        nsec_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        nsec_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        nsec_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        nsec_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        nsec_address0 = 64'd1;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        nsec_address0 = grp_uint32ToByteArray_clone_fu_1124_array_r_address0;
    end else begin
        nsec_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        nsec_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        nsec_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        nsec_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        nsec_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        nsec_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        nsec_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        nsec_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        nsec_address1 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        nsec_address1 = grp_uint32ToByteArray_clone_fu_1124_array_r_address1;
    end else begin
        nsec_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19))) begin
        nsec_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        nsec_ce0 = grp_uint32ToByteArray_clone_fu_1124_array_r_ce0;
    end else begin
        nsec_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19))) begin
        nsec_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        nsec_ce1 = grp_uint32ToByteArray_clone_fu_1124_array_r_ce1;
    end else begin
        nsec_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        nsec_we0 = grp_uint32ToByteArray_clone_fu_1124_array_r_we0;
    end else begin
        nsec_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        nsec_we1 = grp_uint32ToByteArray_clone_fu_1124_array_r_we1;
    end else begin
        nsec_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_uint32ToByteArray_fu_1087_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_uint32ToByteArray_fu_1087_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_uint32ToByteArray_fu_1087_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((grp_uint32ToByteArray_fu_1087_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16) & (icmp_ln116_reg_1491 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else if (((grp_uint32ToByteArray_fu_1087_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16) & (icmp_ln116_reg_1491 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((grp_crypto_aead_decrypt_fu_1169_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((grp_crypto_aead_encrypt_fu_1178_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_uint32ToByteArray_clone_fu_1144_ap_done == 1'b0) | (grp_uint32ToByteArray_clone_fu_1134_ap_done == 1'b0) | (grp_uint32ToByteArray_clone_fu_1124_ap_done == 1'b0) | (grp_uint32ToByteArray_clone_fu_1114_ap_done == 1'b0) | (grp_uint32ToByteArray_clone_fu_1104_ap_done == 1'b0) | (grp_uint32ToByteArray_fu_1087_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state4_on_subcall_done = ((grp_uint32ToByteArray_clone_fu_1144_ap_done == 1'b0) | (grp_uint32ToByteArray_clone_fu_1134_ap_done == 1'b0) | (grp_uint32ToByteArray_clone_fu_1124_ap_done == 1'b0) | (grp_uint32ToByteArray_clone_fu_1114_ap_done == 1'b0) | (grp_uint32ToByteArray_clone_fu_1104_ap_done == 1'b0) | (grp_uint32ToByteArray_fu_1087_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state6_on_subcall_done = ((grp_uint32ToByteArray_clone_fu_1144_ap_done == 1'b0) | (grp_uint32ToByteArray_clone_fu_1134_ap_done == 1'b0) | (grp_uint32ToByteArray_clone_fu_1124_ap_done == 1'b0) | (grp_uint32ToByteArray_clone_fu_1114_ap_done == 1'b0) | (grp_uint32ToByteArray_clone_fu_1104_ap_done == 1'b0) | (grp_uint32ToByteArray_fu_1087_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state8_on_subcall_done = ((grp_uint32ToByteArray_clone_fu_1144_ap_done == 1'b0) | (grp_uint32ToByteArray_clone_fu_1134_ap_done == 1'b0) | (grp_uint32ToByteArray_clone_fu_1124_ap_done == 1'b0) | (grp_uint32ToByteArray_clone_fu_1114_ap_done == 1'b0) | (grp_uint32ToByteArray_clone_fu_1104_ap_done == 1'b0) | (grp_uint32ToByteArray_fu_1087_ap_done == 1'b0));
end

assign ap_return = ((ap_phi_mux_retval_0_phi_fu_1080_p4[0:0] == 1'b1) ? 32'd4294967295 : 32'd0);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_crypto_aead_decrypt_fu_1169_ap_start = grp_crypto_aead_decrypt_fu_1169_ap_start_reg;

assign grp_crypto_aead_encrypt_fu_1178_ap_start = grp_crypto_aead_encrypt_fu_1178_ap_start_reg;

assign grp_uint32ToByteArray_clone_fu_1104_ap_start = grp_uint32ToByteArray_clone_fu_1104_ap_start_reg;

assign grp_uint32ToByteArray_clone_fu_1114_ap_start = grp_uint32ToByteArray_clone_fu_1114_ap_start_reg;

assign grp_uint32ToByteArray_clone_fu_1124_ap_start = grp_uint32ToByteArray_clone_fu_1124_ap_start_reg;

assign grp_uint32ToByteArray_clone_fu_1134_ap_start = grp_uint32ToByteArray_clone_fu_1134_ap_start_reg;

assign grp_uint32ToByteArray_clone_fu_1144_ap_start = grp_uint32ToByteArray_clone_fu_1144_ap_start_reg;

assign grp_uint32ToByteArray_fu_1087_ap_start = grp_uint32ToByteArray_fu_1087_ap_start_reg;

assign icmp_ln116_fu_1187_p2 = ((decrypt == 32'd0) ? 1'b1 : 1'b0);

assign or_ln120_2_fu_1269_p5 = {{{{c_load_reg_1845}, {c_load_1_reg_1850}}, {c_load_2_reg_1865}}, {c_load_3_reg_1870}};

assign or_ln121_2_fu_1278_p5 = {{{{c_load_4_reg_1880}, {c_load_5_reg_1885}}, {c_load_6_reg_1900}}, {c_load_7_reg_1905}};

assign or_ln122_2_fu_1287_p5 = {{{{c_load_8_reg_1915}, {c_load_9_reg_1920}}, {c_load_10_reg_1935}}, {c_load_11_reg_1940}};

assign or_ln123_2_fu_1296_p5 = {{{{c_load_12_reg_1950}, {c_load_13_reg_1955}}, {c_load_14_reg_1970}}, {c_load_15_reg_1975}};

assign or_ln124_2_fu_1305_p5 = {{{{c_load_16_reg_1985}, {c_load_17_reg_1990}}, {c_load_18_reg_2005}}, {c_load_19_reg_2010}};

assign or_ln125_2_fu_1314_p5 = {{{{c_load_20_reg_2020}, {c_load_21_reg_2025}}, {c_load_22_reg_2040}}, {c_load_23_reg_2045}};

assign or_ln126_2_fu_1323_p5 = {{{{c_load_24_reg_2055}, {c_load_25_reg_2060}}, {c_load_26_reg_2075}}, {c_load_27_reg_2080}};

assign or_ln127_2_fu_1332_p5 = {{{{c_load_28_reg_2090}, {c_load_29_reg_2095}}, {c_q1}}, {c_q0}};

assign or_ln135_2_fu_1193_p5 = {{{{m_load_reg_1590}, {m_load_1_reg_1595}}, {m_load_2_reg_1630}}, {m_load_3_reg_1635}};

assign or_ln136_2_fu_1202_p5 = {{{{m_load_4_reg_1660}, {m_load_5_reg_1665}}, {m_load_6_reg_1700}}, {m_load_7_reg_1705}};

assign or_ln137_2_fu_1211_p5 = {{{{m_load_8_reg_1730}, {m_load_9_reg_1735}}, {m_load_10_reg_1770}}, {m_load_11_reg_1775}};

assign or_ln138_2_fu_1220_p5 = {{{{m_load_12_reg_1800}, {m_load_13_reg_1805}}, {m_q1}}, {m_q0}};

assign or_ln140_2_fu_1231_p5 = {{{{nsec_load_reg_1610}, {nsec_load_1_reg_1615}}, {nsec_load_2_reg_1645}}, {nsec_load_3_reg_1650}};

assign or_ln141_2_fu_1240_p5 = {{{{nsec_load_4_reg_1680}, {nsec_load_5_reg_1685}}, {nsec_load_6_reg_1715}}, {nsec_load_7_reg_1720}};

assign or_ln142_2_fu_1249_p5 = {{{{nsec_load_8_reg_1750}, {nsec_load_9_reg_1755}}, {nsec_load_10_reg_1785}}, {nsec_load_11_reg_1790}};

assign or_ln143_2_fu_1258_p5 = {{{{nsec_load_12_reg_1820}, {nsec_load_13_reg_1825}}, {nsec_q1}}, {nsec_q0}};

endmodule //axi_ascon
