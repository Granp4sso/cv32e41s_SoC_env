// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module axi_ascon_uint32ToByteArray (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        value_val,
        array_r_address0,
        array_r_ce0,
        array_r_we0,
        array_r_d0,
        array_r_address1,
        array_r_ce1,
        array_r_we1,
        array_r_d1,
        idx
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] value_val;
output  [4:0] array_r_address0;
output   array_r_ce0;
output   array_r_we0;
output  [7:0] array_r_d0;
output  [4:0] array_r_address1;
output   array_r_ce1;
output   array_r_we1;
output  [7:0] array_r_d1;
input  [4:0] idx;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] array_r_address0;
reg array_r_ce0;
reg array_r_we0;
reg[7:0] array_r_d0;
reg[4:0] array_r_address1;
reg array_r_ce1;
reg array_r_we1;
reg[7:0] array_r_d1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] trunc_ln9_reg_163;
wire   [7:0] trunc_ln10_fu_133_p1;
reg   [7:0] trunc_ln10_reg_168;
wire   [63:0] idx_cast_fu_85_p1;
wire   [63:0] zext_ln8_fu_118_p1;
wire   [63:0] zext_ln9_fu_142_p1;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln10_fu_152_p1;
wire   [4:0] add_ln8_fu_112_p2;
wire   [4:0] add_ln9_fu_137_p2;
wire   [4:0] add_ln10_fu_147_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln10_reg_168 <= trunc_ln10_fu_133_p1;
        trunc_ln9_reg_163 <= {{value_val[15:8]}};
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        array_r_address0 = zext_ln10_fu_152_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        array_r_address0 = zext_ln8_fu_118_p1;
    end else begin
        array_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        array_r_address1 = zext_ln9_fu_142_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        array_r_address1 = idx_cast_fu_85_p1;
    end else begin
        array_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        array_r_ce0 = 1'b1;
    end else begin
        array_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        array_r_ce1 = 1'b1;
    end else begin
        array_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        array_r_d0 = trunc_ln10_reg_168;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        array_r_d0 = {{value_val[23:16]}};
    end else begin
        array_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        array_r_d1 = trunc_ln9_reg_163;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        array_r_d1 = {{value_val[31:24]}};
    end else begin
        array_r_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        array_r_we0 = 1'b1;
    end else begin
        array_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        array_r_we1 = 1'b1;
    end else begin
        array_r_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_147_p2 = (idx + 5'd3);

assign add_ln8_fu_112_p2 = (idx + 5'd1);

assign add_ln9_fu_137_p2 = (idx + 5'd2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign idx_cast_fu_85_p1 = idx;

assign trunc_ln10_fu_133_p1 = value_val[7:0];

assign zext_ln10_fu_152_p1 = add_ln10_fu_147_p2;

assign zext_ln8_fu_118_p1 = add_ln8_fu_112_p2;

assign zext_ln9_fu_142_p1 = add_ln9_fu_137_p2;

endmodule //axi_ascon_uint32ToByteArray
